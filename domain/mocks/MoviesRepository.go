// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/vinbyte/movies/domain"
)

// MoviesRepository is an autogenerated mock type for the MoviesRepository type
type MoviesRepository struct {
	mock.Mock
}

// DetailMovie provides a mock function with given fields: ctx, param
func (_m *MoviesRepository) DetailMovie(ctx context.Context, param domain.DetailParam) (string, string, domain.OmdbDetailResponse, error) {
	ret := _m.Called(ctx, param)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, domain.DetailParam) string); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, domain.DetailParam) string); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 domain.OmdbDetailResponse
	if rf, ok := ret.Get(2).(func(context.Context, domain.DetailParam) domain.OmdbDetailResponse); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Get(2).(domain.OmdbDetailResponse)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, domain.DetailParam) error); ok {
		r3 = rf(ctx, param)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SearchMovies provides a mock function with given fields: ctx, param
func (_m *MoviesRepository) SearchMovies(ctx context.Context, param domain.SearchParam) (string, string, domain.OmdbSearchResponse, error) {
	ret := _m.Called(ctx, param)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, domain.SearchParam) string); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, domain.SearchParam) string); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 domain.OmdbSearchResponse
	if rf, ok := ret.Get(2).(func(context.Context, domain.SearchParam) domain.OmdbSearchResponse); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Get(2).(domain.OmdbSearchResponse)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, domain.SearchParam) error); ok {
		r3 = rf(ctx, param)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
